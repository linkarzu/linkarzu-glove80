/*
 * Copyright (c) 2020 The ZMK Contributors
 * Copyright (c) 2023 Innaworks Development Limited, trading as MoErgo
 *
 * SPDX-License-Identifier: MIT
 */


/* THIS FILE WAS GENERATED BY GLOVE80 LAYOUT EDITOR
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
/* Include all behavior includes needed */
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>

/* On demand includes */


/* Automatically generated layer name #define */
#define LAYER_Base 0
#define LAYER_Lower 1
#define LAYER_Magic 2
#define LAYER_Factory 3
#define LAYER_Nav 4
#define LAYER_Symb 5
#define LAYER_Subl 6
#define LAYER_Apps 7

/* To deal with the situation where there is no Lower layer, to keep &lower happy */
#ifndef LAYER_Lower
#define LAYER_Lower 0
#endif

/* Custom Device-tree */



/* Glove80 system behavior & macros */
/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to
        lower: lower {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo LAYER_Lower>, <&to LAYER_Lower>;
        };
    };
};

/ {
    macros {
        rgb_ug_status_macro: rgb_ug_status_macro {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&rgb_ug RGB_STATUS>;
        };
    };
};


/ {
#ifdef BT_DISC_CMD
    behaviors {
        bt_0: bt_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_0";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_0>, <&bt BT_DISC 0>;
        };
        bt_1: bt_1 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_1";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_1>, <&bt BT_DISC 1>;
        };
        bt_2: bt_2 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_2";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_2>, <&bt BT_DISC 2>;
        };
        bt_3: bt_3 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_3";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_3>, <&bt BT_DISC 3>;
        };
    };
    macros {
        bt_select_0: bt_select_0 {
            label = "BT_SELECT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };
        bt_select_1: bt_select_1 {
            label = "BT_SELECT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };
        bt_select_2: bt_select_2 {
            label = "BT_SELECT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };
        bt_select_3: bt_select_3 {
            label = "BT_SELECT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };
#else
    macros {
        bt_0: bt_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };
        bt_1: bt_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };
        bt_2: bt_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };
        bt_3: bt_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };
#endif
};

/ {
    behaviors {
        magic: magic {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };
    };
};

/* #define for key positions */
#define POS_LH_T1 52
#define POS_LH_T2 53
#define POS_LH_T3 54
#define POS_LH_T4 69
#define POS_LH_T5 70
#define POS_LH_T6 71
#define POS_LH_C1R2 15
#define POS_LH_C1R3 27
#define POS_LH_C1R4 39
#define POS_LH_C1R5 51
#define POS_LH_C2R1 4
#define POS_LH_C2R2 14
#define POS_LH_C2R3 26
#define POS_LH_C2R4 38
#define POS_LH_C2R5 50
#define POS_LH_C2R6 68
#define POS_LH_C3R1 3
#define POS_LH_C3R2 13
#define POS_LH_C3R3 25
#define POS_LH_C3R4 37
#define POS_LH_C3R5 49
#define POS_LH_C3R6 67
#define POS_LH_C4R1 2
#define POS_LH_C4R2 12
#define POS_LH_C4R3 24
#define POS_LH_C4R4 36
#define POS_LH_C4R5 48
#define POS_LH_C4R6 66
#define POS_LH_C5R1 1
#define POS_LH_C5R2 11
#define POS_LH_C5R3 23
#define POS_LH_C5R4 35
#define POS_LH_C5R5 47
#define POS_LH_C5R6 65
#define POS_LH_C6R1 0
#define POS_LH_C6R2 10
#define POS_LH_C6R3 22
#define POS_LH_C6R4 34
#define POS_LH_C6R5 46
#define POS_LH_C6R6 64
#define POS_RH_T1 57
#define POS_RH_T2 56
#define POS_RH_T3 55
#define POS_RH_T4 74
#define POS_RH_T5 73
#define POS_RH_T6 72
#define POS_RH_C1R2 16
#define POS_RH_C1R3 28
#define POS_RH_C1R4 40
#define POS_RH_C1R5 58
#define POS_RH_C2R1 5
#define POS_RH_C2R2 17
#define POS_RH_C2R3 29
#define POS_RH_C2R4 41
#define POS_RH_C2R5 59
#define POS_RH_C2R6 75
#define POS_RH_C3R1 6
#define POS_RH_C3R2 18
#define POS_RH_C3R3 30
#define POS_RH_C3R4 42
#define POS_RH_C3R5 60
#define POS_RH_C3R6 76
#define POS_RH_C4R1 7
#define POS_RH_C4R2 19
#define POS_RH_C4R3 31
#define POS_RH_C4R4 43
#define POS_RH_C4R5 61
#define POS_RH_C4R6 77
#define POS_RH_C5R1 8
#define POS_RH_C5R2 20
#define POS_RH_C5R3 32
#define POS_RH_C5R4 44
#define POS_RH_C5R5 62
#define POS_RH_C5R6 78
#define POS_RH_C6R1 9
#define POS_RH_C6R2 21
#define POS_RH_C6R3 33
#define POS_RH_C6R4 45
#define POS_RH_C6R5 63
#define POS_RH_C6R6 79

/* Custom Defined Behaviors */
/ {
    macros {
        bt0_usbc: bt0_usbc {
            label = "&BT0_USBC";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            tap-ms = <50>;
            wait-ms = <50>;
            bindings
                /* switch mouse */
                = <&macro_press>
                , <&kp RG(LG(N5))>
                , <&macro_wait_time 100>
                , <&macro_release>
                , <&kp RG(LG(N5))>
                , <&macro_wait_time 500>
                /* switch input source monitor */
                , <&macro_press>
                , <&kp LC(LA(LS(LG(N5))))>
                , <&macro_release>
                , <&kp LC(LA(LS(LG(N5))))>
                , <&macro_wait_time 50>
                /* pull github repos */
                , <&macro_press>
                , <&kp RG(LG(J))>
                , <&macro_release>
                , <&kp RG(LG(J))>
                , <&macro_wait_time 50>
                /* switch keyboard */
                , <&macro_press>
                , <&bt_0>
                , <&macro_release>
                , <&bt_0>;
        };
        bt2_hdmi: bt2_hdmi {
            label = "&BT2_HDMI";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            tap-ms = <50>;
            wait-ms = <50>;
            bindings
                /* switch mouse */
                = <&macro_press>
                , <&kp RG(LG(N4))>
                , <&macro_wait_time 100>
                , <&macro_release>
                , <&kp RG(LG(N4))>
                , <&macro_wait_time 500>
                /* switch input source monitor */
                , <&macro_press>
                , <&kp LC(LA(LS(LG(N4))))>
                , <&macro_release>
                , <&kp LC(LA(LS(LG(N4))))>
                , <&macro_wait_time 50>
                /* pull github repos */
                , <&macro_press>
                , <&kp RG(LG(J))>
                , <&macro_release>
                , <&kp RG(LG(J))>
                , <&macro_wait_time 50>
                /* switch keyboard */
                , <&macro_press>
                , <&bt_2>
                , <&macro_release>
                , <&bt_2>;
        };
    };


};

/* Automatically generated macro definitions */
/ {
    macros {

    };
};

/* Automatically generated behavior definitions */
/ {
    behaviors {
        // Homerow Mod for the left pinky - TailorKey (influenced)
        hrm_l: hrm_l {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <300>;
            bindings = <&kp>, <&kp>;
            flavor = "tap-preferred";
            quick-tap-ms = <300>;
            require-prior-idle-ms = <0>;
            retro-tap;
        };

        // Homerow Mod for the right pinky - TailorKey (influenced).
        hrm_r: hrm_r {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <300>;
            bindings = <&kp>, <&kp>;
            flavor = "tap-preferred";
            quick-tap-ms = <300>;
            require-prior-idle-ms = <0>;
            retro-tap;
        };

        my_mt: my_mt {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <300>;
            bindings = <&kp>, <&kp>;
            quick-tap-ms = <300>;
            require-prior-idle-ms = <0>;
            retro-tap;
        };

        /* symbl: symbl { */
        /*     compatible = "zmk,behavior-hold-tap"; */
        /*     #binding-cells = <2>; */
        /*     flavor = "tap-preferred"; */
        /*     tapping-term-ms = <300>; */
        /*     bindings = <&mo>, <&kp>; */
        /*     display-name = "Symbol-Layer"; */
        /* }; */

    };
};

/* Automatically generated combos definitions */


/* Automatically generated keymap */
/ {
    keymap {
        compatible = "zmk,keymap";


        layer_Base {
            bindings = <
              &kp F1                &kp F2             &kp F3             &kp F4               &kp F5                                                                                                                                        &kp F6                 &kp F7                &kp F8                        &kp F9                &kp F10
              &kp GRAVE             &kp N1             &kp N2             &kp N3               &kp N4                 &kp N5                                                                                             &kp N6              &kp N7                 &kp N8                &kp N9                        &kp N0                &kp MINUS
              &my_mt RET TAB        &kp Q              &kp W              &kp E                &kp R                  &kp T                                                                                              &kp Y               &kp U                  &kp I                 &kp O                         &kp P                 &kp BSLH
              &lt LAYER_Nav ESC     &hrm_l LCTRL A     &kp S              &hrm_l LGUI D        &hrm_l LALT F          &my_mt LC(Z) G                                                                                     &kp H               &hrm_r RALT J          &hrm_r RGUI K         &my_mt LG(LC(LA(LS(Z)))) L    &hrm_r RCTRL SEMI     &kp SQT
              &kp LSHFT             &my_mt LG(TAB) Z   &my_mt LG(GRAVE) X &my_mt LG(C) C       &my_mt LG(V) V         &kp B           &kp LGUI   &kp LALT             &lower   &kp RCTRL  &kp RALT           &kp RGUI    &kp N               &kp M                  &kp COMMA             &my_mt LG(LC(LA(LS(6)))) DOT  &kp FSLH              &kp RSHFT
              &magic LAYER_Magic 0  &kp LCTRL          &kp LG(GRAVE)      &kp LEFT             &kp RIGHT                              &kp SPACE  &lt LAYER_Symb BSPC  &kp DEL  &kp RSHFT  &lt LAYER_Subl RET &kp SPACE                       &kp DOWN               &kp UP                &kp LBKT                      &kp RBKT              &kp ESC
            >;
        };

        layer_Lower {
            bindings = <
         &kp C_BRI_DN  &kp C_BRI_UP      &kp C_PREV      &kp C_NEXT   &kp C_PP                                                                                        &trans        &trans        &trans          &kp F11          &kp F12
               &trans         &none           &none           &none  &bt2_hdmi  &bt0_usbc                                                   &kp LEFT_PARENTHESIS  &kp KP_NUM  &kp KP_EQUAL  &kp KP_SLASH  &kp KP_MULTIPLY  &kp PRINTSCREEN
               &trans         &none           &none    &kp UP_ARROW      &none    &kp END                                                  &kp RIGHT_PARENTHESIS   &kp KP_N7     &kp KP_N8     &kp KP_N9     &kp KP_MINUS   &kp SCROLLLOCK
               &trans         &none  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT    &kp RET                                                            &kp PERCENT   &kp KP_N4     &kp KP_N5     &kp KP_N6      &kp KP_PLUS            &none
               &trans     &kp K_APP          &trans          &trans     &trans  &kp PG_DN  &trans  &trans  &trans  &trans  &trans  &trans              &kp COMMA   &kp KP_N1     &kp KP_N2     &kp KP_N3     &kp KP_ENTER           &trans
 &magic LAYER_Magic 0      &kp CAPS         &kp INS         &kp F11    &kp F12             &trans  &trans  &trans  &trans  &trans  &trans                          &kp KP_N0     &kp KP_N0    &kp KP_DOT     &kp KP_ENTER           &trans
            >;
        };

        layer_Magic {
            bindings = <
  &bt BT_CLR            &none            &none            &none            &none                                                                                  &none   &none   &none   &none  &bt BT_CLR_ALL
       &none            &none            &none            &none            &none            &none                                                         &none   &none   &none   &none   &none           &none
       &none  &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                         &none   &none   &none   &none   &none           &none
 &bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                         &none   &none   &none   &none   &none     &bootloader
  &sys_reset            &none            &none            &none            &none            &none   &bt_2   &bt_3         &none   &none   &none   &none   &none   &none   &none   &none   &none      &sys_reset
       &none            &none            &none            &none            &none                    &bt_0   &bt_1  &out OUT_USB   &none   &none   &none           &none   &none   &none   &none           &to 3
            >;
        };

        layer_Factory {
            bindings = <
 &kp NUMBER_0  &kp NUMBER_6  &kp NUMBER_2  &kp NUMBER_8  &kp NUMBER_4                                                                                                                  &kp NUMBER_4  &kp NUMBER_8  &kp NUMBER_2  &kp NUMBER_6  &kp NUMBER_0
 &kp NUMBER_1  &kp NUMBER_7  &kp NUMBER_3  &kp NUMBER_9  &kp NUMBER_5  &kp NUMBER_0                                                                                      &kp NUMBER_0  &kp NUMBER_5  &kp NUMBER_9  &kp NUMBER_3  &kp NUMBER_7  &kp NUMBER_1
 &kp NUMBER_2  &kp NUMBER_8  &kp NUMBER_4  &kp NUMBER_0  &kp NUMBER_6  &kp NUMBER_1                                                                                      &kp NUMBER_1  &kp NUMBER_6  &kp NUMBER_0  &kp NUMBER_4  &kp NUMBER_8  &kp NUMBER_2
 &kp NUMBER_3  &kp NUMBER_9  &kp NUMBER_5  &kp NUMBER_1  &kp NUMBER_7  &kp NUMBER_2                                                                                      &kp NUMBER_2  &kp NUMBER_7  &kp NUMBER_1  &kp NUMBER_5  &kp NUMBER_9  &kp NUMBER_3
 &kp NUMBER_4  &kp NUMBER_0  &kp NUMBER_6  &kp NUMBER_2  &kp NUMBER_8  &kp NUMBER_3  &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp NUMBER_6  &kp NUMBER_5  &kp NUMBER_4  &kp NUMBER_3  &kp NUMBER_8  &kp NUMBER_2  &kp NUMBER_6  &kp NUMBER_0  &kp NUMBER_4
 &kp NUMBER_5  &kp NUMBER_1  &kp NUMBER_7  &kp NUMBER_3  &kp NUMBER_9                &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp NUMBER_9  &kp NUMBER_8  &kp NUMBER_7                &kp NUMBER_9  &kp NUMBER_3  &kp NUMBER_7  &kp NUMBER_1  &kp NUMBER_5
            >;
        };

        layer_Nav {
            bindings = <
              &trans                     &trans                     &trans                    &trans                   &trans                                                                                                              &trans                &trans               &trans                &trans                    &trans
              &trans                     &trans                     &trans                    &trans                   &trans          &trans                                                                       &trans                 &trans                &trans               &trans                &trans                    &trans
              &kp LG(LC(LA(LS(TAB))))    &kp LG(LC(LA(LS(N0))))     &kp LG(LC(LA(LS(W))))     &kp LG(LC(LA(LS(D))))    &trans          &trans                                                                       &kp LA(LS(LEFT))       &kp LA(LS(DOWN))      &kp LA(LS(UP))       &kp LA(LS(RIGHT))     &trans                    &trans
              &trans                     &kp LG(LC(LA(LS(EQUAL))))  &kp LG(LC(LA(LS(N9))))    &kp LG(LBKT)             &kp LG(RBKT)    &kp LG(LC(LA(LS(G))))                                                        &kp LEFT               &kp DOWN              &kp UP               &kp RIGHT             &kp LG(LC(LA(LS(SEMI))))  &trans
              &trans                     &trans                     &trans                    &trans                   &trans          &trans                 &trans  &trans  &trans  &trans  &trans  &trans        &trans                 &trans                &trans               &trans                &trans                    &trans
              &trans                     &trans                     &trans                    &trans                   &trans                                 &trans  &trans  &trans  &trans  &trans  &trans                               &trans                &trans               &trans                &trans                    &trans
            >;
        };

        layer_Symb {
            bindings = <
              &trans                     &trans                     &trans                    &trans                   &trans                                                                                                                    &trans                  &trans                 &trans                  &trans                    &trans
              &trans                     &trans                     &trans                    &trans                   &trans                &trans                                                                       &trans                 &trans                  &trans                 &trans                  &trans                    &trans
              &kp LS(MINUS)              &kp LS(N1)                 &kp LS(N2)                &kp LS(N3)               &kp LS(N4)            &kp LS(N5)                                                                   &kp LS(N6)             &kp LS(N7)              &kp LS(N8)             &kp LS(N9)              &kp LS(N0)                &kp MINUS
              &kp LS(GRAVE)              &kp N1                     &kp N2                    &kp N3                   &kp N4                &kp N5                                                                       &kp N6                 &kp N7                  &kp N8                 &kp N9                  &kp N0                    &kp GRAVE
              &kp LS(EQUAL)              &kp LS(COMMA)              &kp LS(DOT)               &kp LS(FSLH)             &kp LBKT              &kp RBKT               &trans  &trans  &trans  &trans  &trans  &trans        &kp LS(LBKT)           &kp LS(RBKT)            &kp COMMA              &kp DOT                 &kp FSLH                  &kp EQUAL
              &trans                     &trans                     &trans                    &trans                   &trans                                       &trans  &trans  &trans  &trans  &trans  &trans                               &trans                  &trans                 &trans                  &trans                    &trans
            >;
        };

        layer_Subl {
            bindings = <
              &trans                     &trans                     &trans                    &trans                   &trans                                                                                                                                 &trans                  &trans                 &trans                  &trans                    &trans
              &trans                     &trans                     &trans                    &trans                   &trans                &trans                                                                                    &trans                 &trans                  &trans                 &trans                  &trans                    &trans
              &trans                     &trans                     &trans                    &trans                   &trans                &trans                                                                                    &trans                 &trans                  &trans                 &trans                  &trans                    &trans
              &trans                     &trans                     &trans                    &trans                   &trans                &trans                                                                                    &trans                 &trans                  &trans                 &trans                  &trans                    &trans
              &trans                     &trans                     &trans                    &trans                   &trans                &trans                 &trans  &trans               &trans  &trans  &trans  &trans        &trans                 &trans                  &trans                 &trans                  &trans                    &trans
              &trans                     &trans                     &trans                    &trans                   &trans                                       &trans  &lt LAYER_Apps BSPC  &trans  &trans  &trans  &trans                               &trans                  &trans                 &trans                  &trans                    &trans
            >;
        };

        layer_Apps {
            bindings = <
              &trans                     &trans                     &trans                    &trans                   &trans                                                                                                                    &trans                  &trans                 &trans                  &trans                    &trans
              &trans                     &trans                     &trans                    &trans                   &trans                &trans                                                                       &trans                 &trans                  &trans                 &trans                  &trans                    &trans
              &trans                     &kp F13                    &kp F14                   &kp F15                  &kp F16               &kp F17                                                                      &kp F18                &kp F19                 &kp F20                &kp F21                 &kp F22                   &kp F23
              &trans                     &kp LS(F13)                &kp LS(F14)               &kp LS(F15)              &kp LS(F16)           &kp LS(F17)                                                                  &kp LS(F18)            &kp LS(F19)             &kp LS(F20)            &kp LS(F21)             &kp LS(F22)               &kp LS(F23)
              &trans                     &kp LC(F13)                &kp LC(F14)               &kp LC(F15)              &kp LC(F16)           &kp LC(F17)                                                                  &kp LC(F18)            &kp LC(F19)             &kp LC(F20)            &kp LC(F21)             &kp LC(F22)               &kp LC(F23)
              &trans                     &trans                     &trans                    &trans                   &trans                                       &trans  &trans  &trans  &trans  &trans  &trans                               &trans                  &trans                 &trans                  &trans                    &trans
            >;
        };

        /* layer_Template { */
        /*     bindings = < */
        /*       &trans                     &trans                     &trans                    &trans                   &trans                                                                                                                    &trans                  &trans                 &trans                  &trans                    &trans */
        /*       &trans                     &trans                     &trans                    &trans                   &trans                &trans                                                                       &trans                 &trans                  &trans                 &trans                  &trans                    &trans */
        /*       &trans                     &trans                     &trans                    &trans                   &trans                &trans                                                                       &trans                 &trans                  &trans                 &trans                  &trans                    &trans */
        /*       &trans                     &trans                     &trans                    &trans                   &trans                &trans                                                                       &trans                 &trans                  &trans                 &trans                  &trans                    &trans */
        /*       &trans                     &trans                     &trans                    &trans                   &trans                &trans                 &trans  &trans  &trans  &trans  &trans  &trans        &trans                 &trans                  &trans                 &trans                  &trans                    &trans */
        /*       &trans                     &trans                     &trans                    &trans                   &trans                                       &trans  &trans  &trans  &trans  &trans  &trans                               &trans                  &trans                 &trans                  &trans                    &trans */
        /*     >; */
        /* }; */

    };
};

